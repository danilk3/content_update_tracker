/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Databasechangeloglock;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubLinkInfo;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Link;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.StackoverflowLinkInfo;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.TgChat;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.DatabasechangeloglockRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.GithubLinkInfoRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.LinkRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.StackoverflowLinkInfoRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.TgChatRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<GithubLinkInfoRecord> GITHUB_LINK_INFO_ID = Internal.createUniqueKey(GithubLinkInfo.GITHUB_LINK_INFO, DSL.name("github_link_info_id"), new TableField[] { GithubLinkInfo.GITHUB_LINK_INFO.ID }, true);
    public static final UniqueKey<LinkRecord> LINK_ID = Internal.createUniqueKey(Link.LINK, DSL.name("link_id"), new TableField[] { Link.LINK.LINK_ID }, true);
    public static final UniqueKey<StackoverflowLinkInfoRecord> STACKOVERFLOW_LINK_INFO_ID = Internal.createUniqueKey(StackoverflowLinkInfo.STACKOVERFLOW_LINK_INFO, DSL.name("stackoverflow_link_info_id"), new TableField[] { StackoverflowLinkInfo.STACKOVERFLOW_LINK_INFO.ID }, true);
    public static final UniqueKey<TgChatRecord> CHAT_ID = Internal.createUniqueKey(TgChat.TG_CHAT, DSL.name("chat_id"), new TableField[] { TgChat.TG_CHAT.CHAT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<GithubLinkInfoRecord, LinkRecord> GITHUB_LINK_INFO__FK_LINK = Internal.createForeignKey(GithubLinkInfo.GITHUB_LINK_INFO, DSL.name("fk_link"), new TableField[] { GithubLinkInfo.GITHUB_LINK_INFO.LINK_ID }, Keys.LINK_ID, new TableField[] { Link.LINK.LINK_ID }, true);
    public static final ForeignKey<LinkRecord, TgChatRecord> LINK__FK_TG_CHAT = Internal.createForeignKey(Link.LINK, DSL.name("fk_tg_chat"), new TableField[] { Link.LINK.TG_CHAT_ID }, Keys.CHAT_ID, new TableField[] { TgChat.TG_CHAT.CHAT_ID }, true);
    public static final ForeignKey<StackoverflowLinkInfoRecord, LinkRecord> STACKOVERFLOW_LINK_INFO__FK_LINK = Internal.createForeignKey(StackoverflowLinkInfo.STACKOVERFLOW_LINK_INFO, DSL.name("fk_link"), new TableField[] { StackoverflowLinkInfo.STACKOVERFLOW_LINK_INFO.LINK_ID }, Keys.LINK_ID, new TableField[] { Link.LINK.LINK_ID }, true);
}
